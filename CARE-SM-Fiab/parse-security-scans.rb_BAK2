require 'json'

def parse_trivy_json(output)
  # Parse Trivy JSON output and filter for CRITICAL and HIGH vulnerabilities.
  # Expects JSON with a 'Results' key containing an array of result objects.
  begin
    data = JSON.parse(output)
    filtered_vulns = []
    results = data['Results'] || []
    unless data['Results']
      puts 'Error: JSON does not contain "Results" key. Ensure input is valid Trivy JSON output.'
      exit 1
    end
    results.each do |result|
      next unless result['Vulnerabilities'] # Skip if no vulnerabilities
      result['Vulnerabilities'].each do |vuln|
        severity = vuln['Severity']&.upcase
        if %w[CRITICAL HIGH].include?(severity)
          filtered_vulns << {
            'Target' => result['Target'] || 'Unknown',
            'VulnerabilityID' => vuln['VulnerabilityID'] || 'N/A',
            'PkgName' => vuln['PkgName'] || 'N/A',
            'InstalledVersion' => vuln['InstalledVersion'] || 'N/A',
            'FixedVersion' => vuln['FixedVersion'] || 'N/A',
            'Severity' => severity,
            'Title' => vuln['Title'] || 'N/A',
            'Description' => vuln['Description'] || 'N/A'
          }
        end
      end
    end
    filtered_vulns
  rescue JSON::ParserError
    puts 'Error: Invalid JSON format. Ensure input is valid Trivy JSON output.'
    exit 1
  end
end

def print_basic_output(vulns)
  # Print a simplified output: summary counts and basic list.
  if vulns.empty?
    puts 'No CRITICAL or HIGH vulnerabilities found.'
    return
  end

  critical_count = vulns.count { |v| v['Severity'] == 'CRITICAL' }
  high_count = vulns.count { |v| v['Severity'] == 'HIGH' }
  puts "Summary: CRITICAL: #{critical_count}, HIGH: #{high_count}"
  puts "\nHigh-Risk Vulnerabilities:"
  puts '-' * 80
  vulns.each do |vuln|
    puts "Target: #{vuln['Target']}"
    puts "  ID: #{vuln['VulnerabilityID']} | Package: #{vuln['PkgName']} | Installed: #{vuln['InstalledVersion']} | Fixed: #{vuln['FixedVersion']}"
    puts "  Severity: #{vuln['Severity']} | Title: #{vuln['Title']}"
    puts "  Description: #{vuln['Description'][0, 200]}..." if vuln['Description'] != 'N/A'
    puts
  end
end

if ARGV.empty? && $stdin.tty?
  puts 'Usage: ruby trivy_parser.rb <trivy_output.json> or pipe from trivy (e.g., trivy image <image> --format json | ruby trivy_parser.rb)'
  exit 1
end

# Read input: either from file or stdin
output = if !ARGV.empty?
           begin
             File.read(ARGV[0])
           rescue Errno::ENOENT
             puts "Error: File '#{ARGV[0]}' not found."
             exit 1
           end
         else
           $stdin.read
         end

# Parse JSON and print output
vulns = parse_trivy_json(output)
print_basic_output(vulns)
